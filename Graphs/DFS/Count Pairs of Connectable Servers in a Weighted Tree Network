class Solution {
public:

    void dfs (unordered_map < int, vector<pair<int,int>> > &adj, int u, int currwt, int &count, vector <bool> &visited, int signalSpeed){

        if(visited[u]) return ;

        visited[u] = true ;

        if(currwt % signalSpeed == 0) count++;

        for (auto &p : adj[u]){

            int v  = p.first  ;
            int wt = p.second ;
            dfs (adj, v, currwt+wt, count, visited, signalSpeed) ;
        }
    }

    vector<int> countPairsOfConnectableServers(vector<vector<int>>& edges, int signalSpeed) {
        
        // create graph

        unordered_map < int, vector<pair<int,int>> > adj ;

        for (auto & edge : edges){

            int u  = edge[0] ;
            int v  = edge[1] ;
            int wt = edge[2] ; 

            adj[u].push_back({v,wt}) ;
            adj[v].push_back({u,wt}) ;

        }

        int n = adj.size() ;

        vector <int> ans (n,0) ;

        for (int i = 0 ; i < n ; i ++){

            vector <int> connects ;

            for (auto &p : adj[i]){

                int v  = p.first  ;
                int wt = p.second ;

                int count = 0 ;

                vector <bool> visited (n, false) ;

                visited[i] = true ;

                dfs (adj, v, wt, count, visited, signalSpeed) ;

                connects.push_back(count) ;
            }

            if(connects.size()<=1) continue;

            int sum = accumulate(begin(connects), end(connects), 0) ;

            for(int j = 0 ; j < connects.size(); j++){
                ans[i] += connects[j]*(sum - connects[j]);
            }

            ans[i] /= 2 ;
        }

        return ans ;
    }
};
