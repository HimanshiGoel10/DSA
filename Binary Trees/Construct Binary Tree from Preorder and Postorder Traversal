class Solution {
public:
    
    TreeNode* build (vector<int>& preorder, int ps, int pe, vector<int>& postorder, int pos, int poe){

        if(ps>pe) return NULL;

        if(ps==pe){
            TreeNode* root = new TreeNode(preorder[ps]);
            return root;
        }

        int leftval = preorder[ps+1] ;

        int i = pos;

        while(i<=poe){
            if(postorder[i]==leftval)break;
            i++;
        }

        TreeNode* root = new TreeNode(preorder[ps]);

        root->left = build (preorder, ps+1, ps+i-pos+1 , postorder, pos, i) ;

        root->right = build (preorder, ps+i-pos+2, pe , postorder, i+1, poe-1) ;

        return root ;
    }

    TreeNode* constructFromPrePost(vector<int>& preorder, vector<int>& postorder) {

        int n = preorder.size() ;
        
        return build (preorder, 0, n-1, postorder, 0, n-1) ;
    }
};
