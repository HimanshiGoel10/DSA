class Solution {
public:

    int m;
    int n;

    typedef pair<int,int> p;

    vector <vector<int>> directions = {{-1,0}, {1,0}, {0,-1}, {0,1}};

    bool safe (int i, int j){
        return i>=0 && i<m && j>=0 && j<n ;
    }

    void bfs (vector<vector<char>>& grid, vector<vector<bool>> &visited, int r, int c ){

        queue<p> q;
        q.push({r,c});

        visited[r][c] = true;

        while(!q.empty()){

            p node = q.front();
            q.pop();

            int i = node.first;
            int j = node.second;

            for (auto &dir : directions){

                int new_i = i+dir[0];
                int new_j = j+dir[1];

                if(safe(new_i, new_j) && !visited[new_i][new_j] && grid[new_i][new_j]=='1'){
                    visited[new_i][new_j] = true;
                    q.push({new_i, new_j});
                }
            }
        }
    }
    int numIslands(vector<vector<char>>& grid) {
        
        m = grid.size();
        n = grid[0].size();

        int islands = 0;

        vector<vector<bool>> visited (m, vector<bool>(n,false));

        // Now lets count the islands

        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){

                if(grid[i][j]=='1' && !visited[i][j]){
                    islands++;
                    bfs (grid, visited, i, j);
                }
            }
        } 

        return islands;
    }
};
