class Solution {
public:
    int m;
    int n;

    vector<vector<int>> directions = {{-1,0},{1,0},{0,-1},{0,1}};

    bool Safe (int i, int j){
        return i>=0 && i<m && j>=0 && j<n ;
    }

    void dfs (vector<vector<int>>& grid, int i, int j, vector <vector<bool>> &visited, int &perimeter){

        visited[i][j] = true;

        perimeter += 4;

        for (auto & dir: directions){

            int new_i = i+dir[0];
            int new_j = j+dir[1];

            if(Safe(new_i, new_j) && grid[new_i][new_j]){
                perimeter--;
                if(!visited[new_i][new_j]) dfs (grid, new_i, new_j, visited, perimeter);
            }
        }
    }

    int islandPerimeter(vector<vector<int>>& grid) {
        
        m = grid.size();
        n = grid[0].size();

        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(grid[i][j]==1){

                    int perimeter = 0;
                    vector <vector<bool>> visited (m, vector<bool>(n,false));

                    dfs (grid,i,j,visited,perimeter);

                    return perimeter;
                }
            }
        }

        return -1; // dummy return
    }
};
