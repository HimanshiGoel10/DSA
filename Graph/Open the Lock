class Solution {
public:

    void bfs (string src, string &dest, unordered_set <string> &blocked, int &ans){

        unordered_set<string> visited;

        queue <pair<string,int>> q;

        q.push({src,0});
        visited.insert(src);

        if(blocked.find(src) != blocked.end()) return;

        while(!q.empty()){

            auto p = q.front();
            q.pop();

            string str = p.first;
            int steps = p.second;

            if(str == dest){
                ans = steps;
                return;
            }

            for(int i=0; i<4; i++){
                
                char original = str[i];
                char changed = char(str[i]-1);
                
                if(str[i]=='0') changed = '9';
                
                str[i] = changed;

                if(visited.find(str)==visited.end() && blocked.find(str)==blocked.end()){
                    visited.insert(str);
                    q.push({str, steps+1});
                }
                
                str[i] = original;
            }

            for(int i=0; i<4; i++){
                
                char original = str[i];
                char changed = char(str[i]+1);
                
                if(str[i]=='9') changed = '0';
                
                str[i] = changed;

                if(visited.find(str)==visited.end() && blocked.find(str)==blocked.end()){
                    visited.insert(str);
                    q.push({str, steps+1});
                }
                
                str[i] = original;
            }
        }
    }

    int openLock(vector<string>& deadends, string target) {
        
        unordered_set <string> blocked;

        for(auto &deadend: deadends){
            blocked.insert(deadend);
        }

        unordered_set<string> visited;

        int ans = 1e9;

        bfs ("0000", target, blocked, ans) ;

        return ans >= 1e9 ? -1 : ans ;
    }
};
