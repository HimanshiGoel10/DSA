class Solution {
public:
    
    void backtrack (vector<int>& candidates, int target, int currsum, vector<int>& ans, vector<vector<int>> &op, int idx){

        if(currsum == target){
            op.push_back(ans);
            return ;
        }

        if(idx >=candidates.size() || currsum > target){
            return ;
        }

        backtrack (candidates, target, currsum, ans, op, idx+1);

        ans.push_back(candidates[idx]);
        backtrack (candidates, target, currsum+candidates[idx], ans, op, idx);
        ans.pop_back();
    }

    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {

        sort (begin(candidates), end(candidates)) ;
        
        vector<vector<int>> op ;
        vector<int> ans;

        backtrack (candidates, target, 0, ans, op, 0);

        return op ;
    }
};
