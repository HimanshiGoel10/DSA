class Solution {
public:

    void backtrack (int n, string &curr, int open, int close, vector<string> &op){

        if(open>n){
            return ;
        }

        if(open==n && close==n) {
            op.push_back(curr);
            return;
        }

        if (open > close){
            curr.push_back(')');
            close++;
            backtrack (n, curr, open, close, op);
            close--;
            curr.pop_back();
        }

        curr.push_back('(');
        open++;
        backtrack (n, curr, open, close, op);
        open--;
        curr.pop_back();
    }

    vector<string> generateParenthesis(int n) {
        
        vector<string> op ;
        string curr ;

        backtrack (n, curr, 0, 0, op) ;

        return op ;
    }
};
