class Solution {
public:
    int m;
    int n;

    vector<vector<int>> directions = {{-1,0},{1,0},{0,-1},{0,1}};

    bool safe (int i, int j){
        return i>=0 && i<m && j>=0 && j<n;
    }

    int solve (vector<vector<int>>& grid, int i, int j){

        int ans = 0;

        int gold = grid[i][j];
        grid[i][j]=0;

        for (auto & dir: directions){

            int new_i = i+dir[0];
            int new_j = j+dir[1];

            if(safe(new_i, new_j) && grid[new_i][new_j]>0){
                ans = max (ans, solve(grid, new_i, new_j));
            }
        }

        grid[i][j] = gold;

        return grid[i][j]+ans;
    }

    int getMaximumGold(vector<vector<int>>& grid) {
        m = grid.size();
        n = grid[0].size();

        int ans = 0; 

        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){ 
                if(grid[i][j]==0) continue;
                ans = max (ans, solve(grid,i,j));
            }
        }

        return ans;
    }
};
