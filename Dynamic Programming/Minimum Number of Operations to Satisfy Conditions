class Solution {
public:
    
    int m;
    
    int n;
    
    int dp[1001][11];
    
    
    int solve (vector<vector<int>>& grid, int col, int notAllowed, vector<vector<int>> &freq){
        
        if(col<0) return 0;
        
        if(dp[col][notAllowed]!=-1) return dp[col][notAllowed];
        
        int num = INT_MAX;
        
        for(int i=0; i<10; i++){
            
            if(i==notAllowed) continue;
            
            num = min(num, (m-freq[col][i])+solve(grid, col-1, i, freq));
        }
        
        return dp[col][notAllowed] =num;
    }
        
    int minimumOperations(vector<vector<int>>& grid) {
        m = grid.size();
        n = grid[0].size();
        
        memset(dp,-1,sizeof(dp));
        
        vector<vector<int>> freq (n, vector<int>(10, 0));
        
        for(int j=n-1; j>=0; j--){
            
            for(int i=0; i<m; i++){
                
                freq[j][grid[i][j]]++;
            }
        }
        
        return solve(grid, n-1, 10, freq) ;
    }
};
