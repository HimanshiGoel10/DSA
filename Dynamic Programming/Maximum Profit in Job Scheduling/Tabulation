class Solution {
public:

    void find (vector <vector<int>> &v, int si, int ei, int target, int &idx){

        if(si>ei){
            return;
        }

        int mid = ei - (ei-si)/2 ;

        if(v[mid][0] >= target){
            idx = mid;
            ei = mid-1;
        }

        else{
            si = mid+1 ;
        }

        find (v, si, ei, target, idx) ;
    } 

    int jobScheduling(vector<int>& startTime, vector<int>& endTime, vector<int>& profit) {
        
        vector <vector<int>> v ;

        for (int i=0; i<startTime.size(); i++){
            v.push_back({startTime[i], endTime[i], profit[i]});
        }

        sort(begin(v), end(v));

        int n = v.size() ;

        vector <int> dp (50001, 0) ;

        for (int i = n-1; i >= 0 ; i--){

            dp[i] = dp[i+1] ;

            int idx = n;
            find (v, i, n-1, v[i][1], idx) ;
            dp[i] = max(dp[i], v[i][2] + dp[idx]);
        }

        return dp[0] ;
    }
};
