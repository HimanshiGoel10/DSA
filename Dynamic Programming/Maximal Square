class Solution {
public:
    int maximalSquare(vector<vector<char>>& matrix) {
        
        int m = matrix.size()    ;
        int n = matrix[0].size() ;

        vector <vector<int>> dp (m, vector<int>(n,0)) ;

        int maxside = 0;

        // fill first row

        for (int j=0; j<n; j++){
            if(matrix[0][j] == '1'){
                dp[0][j] = 1 ;
                maxside  = 1 ;
            }
        }

        // fill first col

        for(int i=0; i<m; i++){
            if(matrix[i][0] == '1'){
                dp[i][0] = 1 ;
                maxside  = 1 ;
            }
        }

        // fill rest dp matrix

        for (int i = 1; i < m ; i++){
            for (int j = 1; j < n ; j++){

                if(matrix[i][j] == '0') continue ;

                dp[i][j] = 1 + min (dp[i-1][j-1], min(dp[i][j-1], dp[i-1][j])) ;

                maxside = max (maxside, dp[i][j]) ;
            }
        }

        return maxside * maxside ; 
    }
};
