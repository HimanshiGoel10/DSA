class Solution {
public:
    int n;

    int dp[201][201][202];

    int solve(vector<vector<int>>& grid, int i, int j, int notAllowed){

        if(i>=n) return 0;

        if(j>=n) return 1e9;

        if(dp[i][j][notAllowed]!=-1) return dp[i][j][notAllowed];

        int a = 1e9;

        if(j!= notAllowed){
            a = grid[i][j] + solve (grid,i+1,0,j);
        }

        int b = solve(grid,i,j+1,notAllowed);

        return dp[i][j][notAllowed] = min(a,b);
    }
    int minFallingPathSum(vector<vector<int>>& grid) {
        n = grid.size();

        memset(dp,-1,sizeof(dp));

        return solve(grid, 0, 0, 201);
    }
};
